export const index = {
	info: 'Info',
	ticket: 'Ticket',
	contract: 'Contract',
	overview: 'Overview',
	activateContractNode:'Activate Contract Node',
	activateContractTip:'It Is Detected That You Have Super Player Privilege, But You Have Not Activated It, Do You Want To Activate It? (This Activation Needs To Consume A Certain Amount Of TRX)',
	activate:'Activate',
	send: 'confirm',
}
export const indexs = {
	fireIsOnDreamsNeverGoOut: 'Fire Is On Dreams Never Go Out',
	indexTip1: 'Full Fire',
	indexTip2: "Never Put Out The Fire",
	totalSell: 'Total Fuel',
	destroyed: 'Burned Fuel',
	contractProgress: 'Number Entrants',
	didNotOpen: 'Not Open',
	totalParticipationInTheContract: 'Total Admission',
	myInvitationLink: 'My Invitation Link',
	copy: 'Copy',
	beginToCopy: 'Begin To Copy',
	issue: 'Issue {0}',
	inviteeCannotBeEmpty: 'Invitee Cannot Be Empty',
	pleaseInputWaveField: 'please Input TRX Address',
	manager: 'Related Person',
	bind: 'Relation',
	pleaseUseTheInvitationAddress:'Please Use The Address Of The Related Person',
	myInviter: 'My Related Person',
	bindAddressTip:'My affiliate wallet address',
	managerinvalid:'Related Person Invalid',
}
export const ticket = {
	hold: 'Hold',
	quickBuy: 'QuickBuy',
	needPay: 'NeedPay',
	receive: 'Receive',
	changeNow: 'Change Now',
	transactionConfirmed: 'successful Fuel Transfer',
	exceedingTheMaximumPurchaseQuantity: 'Exceeding The Maximum Purchase Quantity',
	pleaseInputETHQuantity: 'Please Input TRX Quantity',
	awardReceived: 'Award Received',
	buyLog: 'Buy Log',
	invitLog: 'Invit Log',
	getPriceError: 'Get Price Error',
	getWholesaleError: 'Get Wholesale Error',
	getFPTBalanceError: 'Get FPT Balance Error',
	getInvitBalanceError: 'Get Invit Balance Error',
	getBuyerLogError: 'Get Buyer Log Error',
	getInvitBuyLogError: 'Get Invit Buy Log Error',
	surplus: 'Surplus',
	theAddressSendCannotBeYourOwn: 'The Address Send Cannot Be Your Own',
	failInSend: 'Fail In Send',
	cannotBeEmpty: 'Cannot Be Empty',
	insufficientQuantity: 'Insufficient Quantity',
	address: 'Address',
	num: 'Number',
	send: 'Send',
	addressOfTheOther: 'Address Of The Other',
	quantitySend: 'Quantity Send',
	cancel: 'Cancel',
	pleaseEnterTheAddressOfTheOtherParty: 'Please Enter The Address Of The Other Party',
	pleaseEnterTheQuantityToSend: 'Please Enter The Quantity To Send',
	sendLog: 'Send Log',
	withdrawalIncome: 'bonus',
	available: 'Available',
	becomeNode: 'Become 100 Super Nodes',
	becomeNodeTips1: 'Please Confirm That The {0} TRX Maps 300000 FPT',
	becomeNodeTips2: 'After Mapping, FPT Will Be Automatically Transferred To Smart Contract Execution',
	becomeNodeTips3: '1. Fuel mapping permanent average dividend',
	becomeNodeTips4: '2. 5% of the total admission of the whole network',
	becomeNodeTips5: '3. Get super player bonus {0} TRX immediately',
	contractFuelShortage: 'Smart Contract Fuel Shortage',
	insufficientBalance: 'Insufficient Balance',
	smartContractTimeoutPleaseTryAgain : 'Smart Contract Timeout , Please Try Again',
	insufficientServiceChargePleaseReserveEnoughTRX : 'Insufficient Service Charge ,Please Reserve Enough TRX',
	superNodeRevenue : 'Super Player Bonus',
	noIncomeToBeDrawn: 'No super player assets',
	superNode: 'Super Node',
	superNodeAsset: 'Super Node Asset',
	participating:'Participating',
	confirm:'Confirm',
	pleaseInputTheSendingFuel:'Please Input The Sending Fuel',
}
export const contract = {
	eachParticipationInEthRequires: 'Every 2000 TRX Requires',
	jackpot: 'Jackpot',
	prizeDrawingProgress: 'Prize Progress',
	destroyedTicket: 'Burned Fuel',
	rapidParticipation: 'Rapid Participation',
	numberOfParticipants: 'Participating Assets',
	pleaseInputEthQuantity: 'Please Enter TRX Quantity',
	instantInvolvement: 'Get Involved Now',
	need: 'Fuel Ratio Required',
	participationRecord: 'Participation Record',
	invitationRecord: 'Associated Records',
	participation: 'Participation',
	notOpenedYet: 'Triggered',
	InviterCannotBeEmpty: 'Please use the invitation link to participate in the contract',
	theInviteeisNotParticipatingInTheContract: 'The invitee is not participating in the contract. The invitation link is invalid',
	dataInfo:'Data Info',
	invit:'Invit',
	fullFire:'Full Fire',
	countdown:'Count Down...',
	phaseThree:'phase III',
	walletAddress:'Address',
	pleaseBindTheManagerFirst:'Please Bind The Related Person First',
	contractLaunch:'Contract Launch',
}
export const overview = {
	invitationLink: 'Invitation',
	drawContractRevenue: 'instruction',
	withdrawalOfNodeIncome: 'dividend',
	contractParticipationProgress: 'Re Investment Progress',
	numberOfParticipants: 'Participating Assets',
	revenueEarned: 'Total Revenue',
	revenueCap: 'Earnings Multiples',
	reserveFund: 'Cumulative Bonus',
	numberOfSharedPlayers: 'Direct Push Players',
	teamParameters: 'Team Assets',
	contractRevenue: 'Participation Income',
	shareInTheProfit: 'Promotion Income',
	undrawnEarnings: 'Earnings Not Exported',
	contractStatus: 'Contract Status',
	noParticipation: 'No Participation',
	prizePool: 'Prize Pool',
	ticketRecords: 'Ticket Records',
	purchaseRecords: 'Purchase Records',
	refundRecord: 'Refund Record',
	commissionWithdrawalRecord: 'Commission Export Record',
	contractRecord: 'Contract Record',
	recommendationRecord: 'Recommendation Record',
	participationRecord: 'Participation Record',
	winningRecord: 'Winning Record',
	revenueWithdrawalRecord: 'Contract instruction record',
	superNodeRevenueRecord: 'Contract instruction dividend record',
	addressBalance: 'Address Balance',
	withdrawalFailed: 'Export Failed',
	withdrawalSuccessful: 'Export Successful',
	viewRelationships:'relationships',
	superNode: 'Super Node',
	participating:'Participating',
	withdrawalTip: 'No Income Can Be Derived',
}
export const event = {
	noData: 'No Data',
	networkError: 'Network Error',
	time: 'Time',
	amount: 'Amount',
	number: 'Number',
	referrer: 'Referrer',
	level: 'Level',
	reward: 'Reward',
	purchasingPrice: 'Purchasing Price',
	prizePool: 'Prize Pool',
	awards: 'Awards',
	total: 'Total',
}
export const egg = {
	unclaimedIncome: 'Hatching...',
	revenueEarned: 'Getting...',
}

export const relationship = {
	level:'Association {0} Row',
	total:'Total'
}
export const prize = {
	prizeReward:'Prize Reward',
	address:'Address',
	jackpot:'Jackpot',
	prize:'Prize',
	amount:'Amount',
	time:'Time',
}

export const please_use_wallet = 'Please Use Wallet Such As Imtoken Or TronLink To Access ';
export const switch_lang = 'Switch Language';
export const notYetOpen = 'Not Yet Open';
export const minimumPurchase = 'Mapping';
export const minimumPlayer = 'Get Involved';
export const waitingForReturn = 'Waiting For Return';
export const transactionConfirmed = 'Smart Contract Triggered';
export const assets = 'Assets';
export const maximumPurchase = 'Maximum Mapping ';
export const maximumPlayer = 'Maximum Participation ';
export const congratulationsToPlayerForWinningPrizeAndWinningPrizeInTotal = 'Congratulations to player {0} for winning {1} and {2} in total';
export const SelfPlayerForWinningPrizeAndWinningPrizeInTotal = 'Congratulations on winning the {0} prize and the {1} prize';
export const fail = 'Fail';
export const success = 'Success';
export const transactionFaild = 'Block Congestion, Please Try Again Later';
export const sendTransactionConfirmed = 'Block Confirmation...';